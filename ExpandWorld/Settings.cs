using BepInEx.Configuration;
using UnityEngine;

namespace ExpandWorld {
  public static class Settings {
    public static ConfigEntry<bool> configModifyBiomes;
    public static bool ModifyBiomes => configModifyBiomes.Value;
    public static ConfigEntry<int> configWorldRadius;
    public static int WorldRadius => configWorldRadius.Value;
    public static ConfigEntry<int> configWorldEdgeSize;
    public static int WorldEdgeSize => configWorldEdgeSize.Value;
    public static int WorldTotalRadius => WorldRadius + WorldEdgeSize;
    public static ConfigEntry<int> configMapSize;
    public static int MapSize => configMapSize.Value;
    public static ConfigEntry<int> configMapPixelSize;
    public static int MapPixelSize => configMapPixelSize.Value;
    public static ConfigEntry<int> configActivateArea;
    public static int ActiveArea => configActivateArea.Value;


    public static ConfigEntry<int> configMeadowsMin;
    public static int MeadowsMin => configMeadowsMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configMeadowsMax;
    public static int MeadowsMax => configMeadowsMax.Value * WorldRadius / 100;
    public static ConfigEntry<int> configBlackForestMin;
    public static int BlackForestMin => configBlackForestMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configBlackForestMax;
    public static int BlackForestMax => configBlackForestMax.Value * WorldRadius / 100;
    public static ConfigEntry<int> configSwampMin;
    public static int SwampMin => configSwampMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configSwampMax;
    public static int SwampMax => configSwampMax.Value * WorldRadius / 100;
    public static ConfigEntry<int> configPlainsMin;
    public static int PlainsMin => configPlainsMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configPlainsMax;
    public static int PlainsMax => configPlainsMax.Value * WorldRadius / 100;
    public static ConfigEntry<int> configMistlandsMin;
    public static int MistlandsMin => configMistlandsMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configMistlandsMax;
    public static int MistlandsMax => configMistlandsMax.Value * WorldRadius / 100;
    public static ConfigEntry<int> configDeepNorthMin;
    public static int DeepNorthMin => configDeepNorthMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configDeepNorthMax;
    public static int DeepNorthMax => configDeepNorthMax.Value * WorldTotalRadius / 100;
    public static ConfigEntry<int> configDeepNorthCurvature;
    public static int DeepNorthCurvature => configDeepNorthCurvature.Value * WorldRadius / 100;
    public static ConfigEntry<int> configAshlandsMin;
    public static int AshlandsMin => configAshlandsMin.Value * WorldRadius / 100;
    public static ConfigEntry<int> configAshlandsMax;
    public static int AshlandsMax => configAshlandsMax.Value * WorldTotalRadius / 100;
    public static ConfigEntry<int> configAshlandsCurvature;
    public static int AshlandsCurvature => configAshlandsCurvature.Value * WorldRadius / 100;
    public static ConfigEntry<bool> configUseOffsetX;
    public static bool UseOffsetX => configUseOffsetX.Value;
    public static ConfigEntry<int> configOffsetX;
    public static int OffsetX => configOffsetX.Value;
    public static ConfigEntry<bool> configUseOffsetY;
    public static bool UseOffsetY => configUseOffsetY.Value;
    public static ConfigEntry<int> configOffsetY;
    public static int OffsetY => configOffsetY.Value;
    public static ConfigEntry<bool> configUseHeightSeed;
    public static bool UseHeightSeed => configUseHeightSeed.Value;
    public static ConfigEntry<int> configHeightSeed;
    public static int HeightSeed => configHeightSeed.Value;
    public static ConfigEntry<bool> configUseBlackForestSeed;
    public static bool UseBlackForestSeed => configUseBlackForestSeed.Value;
    public static ConfigEntry<int> configBlackForestSeed;
    public static int BlackForestSeed => configBlackForestSeed.Value;
    public static ConfigEntry<bool> configUseSwampSeed;
    public static bool UseSwampSeed => configUseSwampSeed.Value;
    public static ConfigEntry<int> configSwampSeed;
    public static int SwampSeed => configSwampSeed.Value;
    public static ConfigEntry<bool> configUsePlainsSeed;
    public static bool UsePlainsSeed => configUsePlainsSeed.Value;
    public static ConfigEntry<int> configPlainsSeed;
    public static int PlainsSeed => configPlainsSeed.Value;
    public static ConfigEntry<bool> configUseMistlandsSeed;
    public static bool UseMistlandSeed => configUseMistlandsSeed.Value;
    public static ConfigEntry<int> configMistlandsSeed;
    public static int MistlandsSeed => configMistlandsSeed.Value;
    public static ConfigEntry<bool> configUseStreamSeed;
    public static bool UseStreamSeed => configUseStreamSeed.Value;
    public static ConfigEntry<int> configStreamSeed;
    public static int StreamSeed => configStreamSeed.Value;
    public static ConfigEntry<bool> configUseRiverSeed;
    public static bool UseRiverSeed => configUseRiverSeed.Value;
    public static ConfigEntry<int> configRiverSeed;
    public static int RiverSeed => configRiverSeed.Value;

    private static void ForceRegen(object e, System.EventArgs s) => SetMapMode.ForceRegen = true;
    public static void Init(ConfigFile config) {
      var section = "1. General";
      configModifyBiomes = config.Bind(section, "Modify biomes", true, "Can be disabled if another mod is affecting biomes.");
      configModifyBiomes.SettingChanged += ForceRegen;
      configWorldRadius = config.Bind(section, "World radius", 10000, "Radius of the world in meters (excluding the edge).");
      configWorldRadius.SettingChanged += ForceRegen;
      configWorldEdgeSize = config.Bind(section, "World edge size", 500, "Size of the edge area in meters.");
      configWorldEdgeSize.SettingChanged += ForceRegen;
      configMapSize = config.Bind(section, "Minimap size multiplier", 1, "Multiplier to the minimap size.");
      configMapSize.SettingChanged += (e, s) => {
        SetMapMode.TextureSizeChanged = true;
        Minimap.instance.m_textureSize = MinimapAwake.OriginalTextureSize * MapSize;
        Minimap.instance.m_mapImageLarge.rectTransform.localScale = new Vector3(MapSize, MapSize, MapSize);
      };
      configMapPixelSize = config.Bind(section, "Minimap pixel size multiplier", 1, "Granularity of the minimap.");
      configMapPixelSize.SettingChanged += (e, s) => {
        SetMapMode.ForceRegen = true;
        Minimap.instance.m_pixelSize = MinimapAwake.OriginalPixelSize * MapPixelSize;
      };
      configActivateArea = config.Bind(section, "Active area", 2, "Amounts of zones loaded around the player.");
      configActivateArea.SettingChanged += (e, s) => {
        ZoneSystem.instance.m_activeArea = ActiveArea;
      };

      section = "2. Biomes";
      configMeadowsMin = config.Bind(section, "Meadows start percentage", 0, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configMeadowsMin.SettingChanged += ForceRegen;
      configMeadowsMax = config.Bind(section, "Meadows end percentage", 50, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configMeadowsMax.SettingChanged += ForceRegen;
      configBlackForestMin = config.Bind(section, "Black forest start percentage", 6, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configBlackForestMin.SettingChanged += ForceRegen;
      configBlackForestMax = config.Bind(section, "Black forest end percentage", 60, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configBlackForestMax.SettingChanged += ForceRegen;
      configSwampMin = config.Bind(section, "Swamp start percentage", 20, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configSwampMin.SettingChanged += ForceRegen;
      configSwampMax = config.Bind(section, "Swamp end percentage", 80, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configSwampMax.SettingChanged += ForceRegen;
      configPlainsMin = config.Bind(section, "Plains start percentage", 30, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configPlainsMin.SettingChanged += ForceRegen;
      configPlainsMax = config.Bind(section, "Plains end percentage", 80, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configPlainsMax.SettingChanged += ForceRegen;
      configMistlandsMin = config.Bind(section, "Mistlands start percentage", 60, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configMistlandsMin.SettingChanged += ForceRegen;
      configMistlandsMax = config.Bind(section, "Mistlands end percentage", 100, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configMistlandsMax.SettingChanged += ForceRegen;
      configAshlandsMin = config.Bind(section, "Ashlands start percentage", 80, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configAshlandsMin.SettingChanged += ForceRegen;
      configAshlandsMax = config.Bind(section, "Ashlands end percentage", 100, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configAshlandsMax.SettingChanged += ForceRegen;
      configAshlandsCurvature = config.Bind(section, "Ashlands curvature percentage", 40, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configAshlandsCurvature.SettingChanged += ForceRegen;
      configDeepNorthMin = config.Bind(section, "Deep north start percentage", 80, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configDeepNorthMin.SettingChanged += ForceRegen;
      configDeepNorthMax = config.Bind(section, "Deep north end percentage", 100, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configDeepNorthMax.SettingChanged += ForceRegen;
      configDeepNorthCurvature = config.Bind(section, "Deep north curvature percentage", 40, new ConfigDescription("", new AcceptableValueRange<int>(0, 100)));
      configDeepNorthCurvature.SettingChanged += ForceRegen;

      section = "3. Seed";
      configUseOffsetX = config.Bind(section, "Use custom offset X", false, "Determines x coordinate on the base height map.");
      configUseOffsetX.SettingChanged += ForceRegen;
      configOffsetX = config.Bind(section, "Offset X", 0, "");
      configOffsetX.SettingChanged += ForceRegen;
      configUseOffsetY = config.Bind(section, "Use custom offset Y", false, "Determines y coordinate on the base height map.");
      configUseOffsetY.SettingChanged += ForceRegen;
      configOffsetY = config.Bind(section, "Offset Y", 0, "");
      configOffsetY.SettingChanged += ForceRegen;
      configUseHeightSeed = config.Bind(section, "Use height variation seed", false, "Determines the height variation of most biomes.");
      configUseHeightSeed.SettingChanged += ForceRegen;
      configHeightSeed = config.Bind(section, "Height variation seed", 0, "");
      configHeightSeed.SettingChanged += ForceRegen;
      configUseBlackForestSeed = config.Bind(section, "Use Black forest seed", false, "Determines location of Black forests.");
      configUseBlackForestSeed.SettingChanged += ForceRegen;
      configBlackForestSeed = config.Bind(section, "Black forest seed", 0, "");
      configBlackForestSeed.SettingChanged += ForceRegen;
      configUseSwampSeed = config.Bind(section, "Use Swamp seed", false, "Determines location of Swamps.");
      configUseSwampSeed.SettingChanged += ForceRegen;
      configSwampSeed = config.Bind(section, "Swamp seed", 0, "");
      configSwampSeed.SettingChanged += ForceRegen;
      configUsePlainsSeed = config.Bind(section, "Use Plains seed", false, "Determines location of Plains.");
      configUsePlainsSeed.SettingChanged += ForceRegen;
      configPlainsSeed = config.Bind(section, "Plains seed", 0, "");
      configPlainsSeed.SettingChanged += ForceRegen;
      configUseMistlandsSeed = config.Bind(section, "Use Mistlands seed", false, "Determines location of Mistlands.");
      configUseMistlandsSeed.SettingChanged += ForceRegen;
      configMistlandsSeed = config.Bind(section, "Mistlands seed", 0, "");
      configMistlandsSeed.SettingChanged += ForceRegen;
      configUseStreamSeed = config.Bind(section, "Use stream seed", false, "Determines stream generation");
      configUseStreamSeed.SettingChanged += ForceRegen;
      configStreamSeed = config.Bind(section, "Stream seed", 0, "");
      configStreamSeed.SettingChanged += ForceRegen;
      configUseRiverSeed = config.Bind(section, "Use river seed", false, "Determines river generation");
      configUseRiverSeed.SettingChanged += ForceRegen;
      configRiverSeed = config.Bind(section, "River seed", 0, "");
      configRiverSeed.SettingChanged += ForceRegen;
    }
  }
}